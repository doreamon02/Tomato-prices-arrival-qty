# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load the dataset
dataset_path = 'tomato_disease_dataset.csv'  # Path to your CSV file
df = pd.read_csv(dataset_path)

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(df.head())

# Check for missing values
print("\nChecking for missing values:")
print(df.isnull().sum())

# Basic statistics of the dataset
print("\nDataset statistics:")
print(df.describe())

# Distribution of target variable (disease classification)
print("\nDistribution of target variable:")
print(df['Disease'].value_counts())  # Assuming the target column is 'Disease'

# Visualizing data
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='Disease')
plt.title('Distribution of Tomato Diseases')
plt.xticks(rotation=45)
plt.show()

# Features and target
# Assuming 'Disease' is the target column and the rest are feature columns
X = df.drop(columns=['Disease'])  # Features
y = df['Disease']  # Target

# Split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training: Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = rf_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("\nModel Accuracy: {:.2f}%".format(accuracy * 100))

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:")
print(conf_matrix)

# Classification Report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Visualize Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=df['Disease'].unique(), yticklabels=df['Disease'].unique())
plt.title('Confusion Matrix')
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.show()
